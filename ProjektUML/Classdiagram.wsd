@startuml MachineBorderThicknes

'left to right direction



Package React-pages <<frame>>{
    
    Class Overview{
        <color:darkGreen>Object[] <color:royalBlue>tournaments
        <color:darkGreen>PushDatabase <color:royalBlue>pushDatabase

        <color:darkGreen>JSX.Element</color> render()
        <color:darkGreen>void</color> confirm(<color:darkGreen>Object <color:royalBlue>id)
        <color:darkGreen>void</color> delete()
        <color:darkGreen>void</color> nodelete()
        <color:darkGreen>void</color> mounted()
    }

    Class NewTournament{
        <color:darkGreen>String <color:royalBlue>tourname 
        <color:darkGreen>String <color:royalBlue>type
        <color:darkGreen>String <color:royalBlue>gamemode 

        <color:darkGreen>void</color> setSettings(<color:darkGreen>React.MouseEvent<HTMLAnchorElement, MouseEvent> <color:royalBlue>event</color>)
    }

    together {

        Class AddSinglerPlayer{
            <color:darkGreen>String <color:royalBlue>team
            <color:darkGreen>String <color:royalBlue>name1 
            <color:darkGreen>String <color:royalBlue>trophies1
            <color:darkGreen>Array<String | Array<String>> <color:royalBlue>teams
            <color:darkGreen>Team[] <color:royalBlue>teamObj
            <color:darkGreen>HTMLFormElement <color:royalBlue>form
            <color:darkGreen>String <color:royalBlue>link
            <color:darkGreen>int[] <color:royalBlue>TournamentIDs 
            <color:darkGreen>int[] <color:royalBlue>teamIDs
            <color:darkGreen>int <color:royalBlue>teamID 

            <color:darkGreen>JSX.Element</color> render()
            <color:darkGreen>void</color> confirm(<color:darkGreen>React.MouseEvent<HTMLButtonElemen, MouseEvent> <color:royalBlue>i</color>, Array<Sting | Array<string>> <color:royalBlue>teams</color>)
            <color:darkGreen>void</color> nodelete()
            <color:darkGreen>void</color> delete()
            <color:darkGreen>void</color> createObject(<color:darkGreen>React.MouseEvent<HTMLAnchorElement, MouseEvent> <color:royalBlue>event</color>)
            <color:darkGreen>void</color> buttonClicked()
            <color:darkGreen>void</color> mounted()       
        }

        Class AddTwoPlayerTeams{
            <color:darkGreen>String <color:royalBlue>team
            <color:darkGreen>String <color:royalBlue>name1 
            <color:darkGreen>String <color:royalBlue>trophies1
            <color:darkGreen>String <color:royalBlue>name2
            <color:darkGreen>String <color:royalBlue>trophies2
            <color:darkGreen>Array<String | Array<String>> <color:royalBlue>teams
            <color:darkGreen>Team[] <color:royalBlue>teamObj
            <color:darkGreen>HTMLFormElement <color:royalBlue>form
            <color:darkGreen>String <color:royalBlue>link
            <color:darkGreen>int[] <color:royalBlue>TournamentIDs 
            <color:darkGreen>int[] <color:royalBlue>teamIDs
            <color:darkGreen>int <color:royalBlue>teamID 

            <color:darkGreen>JSX.Element</color> render()
            <color:darkGreen>void</color> confirm(<color:darkGreen>React.MouseEvent<HTMLButtonElement, MouseEvent> <color:royalBlue>i</color>, Array<Sting | Array<string>> <color:royalBlue>teams</color>)
            <color:darkGreen>void</color> nodelete()
            <color:darkGreen>void</color> delete()
            <color:darkGreen>void</color> createObject(<color:darkGreen>React.MouseEvent<HTMLAnchorElement, MouseEvent> <color:royalBlue>event</color>)
            <color:darkGreen>void</color> buttonClicked()
            <color:darkGreen>void</color> mounted()
        }

        Class TournamentPage{
            <color:darkGreen>String <color:royalBlue>link
            <color:darkGreen>String <color:royalBlue>loaded
            <color:darkGreen>String[] <color:royalBlue>canlink
            <color:darkGreen>Tournament <color:royalBlue>tournamentObject
            <color:darkGreen>Team[] <color:royalBlue>teamObject
            <color:darkGreen>TeamMember[] <color:royalBlue>teamMemberObjects
            <color:darkGreen>Match[] <color:royalBlue>matchObjects

            <color:darkGreen>JSX.Element</color> render()
            <color:darkGreen>void</color> mounted()
        }

    }
    
    Class Menu{
        <color:darkGreen>JSX.Element</color> render()
    }
    
    Class ShowTournamentPage{
        <color:darkGreen>PushDatabase <color:royalBlue>pushDatabase
        <color:darkGreen>int[] <color:royalBlue>TournamentIDs
        <color:darkGreen>Boolean <color:royalBlue>loaded
        <color:darkGreen>int <color:royalBlue>length
        <color:darkGreen>Round[] <color:royalBlue>roundsInTournament
        <color:darkGreen>Boolean <color:royalBlue>allredyLoaded
        <color:darkGreen>Boolean <color:royalBlue>showedConfetti

        <color:darkGreen>JSX.Element</color> render()
        <color:darkGreen>void</color> tegn()
        <color:darkGreen>void</color> brackets(<color:darkGreen>int <color:royalBlue>e</color>)
        <color:darkGreen>void containsShadow(<color:darkGreen>React.MouseEvent<HTMLAnchorElement, MouseEvent> <color:royalBlue>event</color>, Match <color:royalBlue>match</color>)
        <color:darkGreen>void</color> save()
        <color:darkGreen>void</color> updateScore()
        <color:darkGreen>Tournament</color> getTournament()
        <color:darkGreen>void</color> mounted()

    }

    Class EditTournamentPage{
        <color:darkGreen>Tournament <color:royalBlue>tournamentObject
        <color:darkGreen>int <color:royalBlue>matchind
        <color:darkGreen>Match <color:royalBlue>match 
        <color:darkGreen>int <color:royalBlue>score1
        <color:darkGreen>int <color:royalBlue>score2
        <color:darkGreen>String <color:royalBlue>regex

        <color:darkGreen>JSX.Element</color> render()
        <color:darkGreen>void</color> save(<color:darkGreen>React.MouseEvent<HTMLAnchorElement, MouseEvent> <color:royalBlue>event</color>)
        <color:darkGreen>Tournament</color> getTournament()
        <color:darkGreen>void</color> mounted()
    }
}

package variables <<frame>>{
    Class tournamentplayer <<tournamentplayer>>{
        <color:darkGreen>Array<Tournament | Date> <color:royalBlue>tournamentplayer
    }

    Class tournamentplayers <<tournamentplayers>>{
        <color:darkGreen>Array<Tournament | Date> <color:royalBlue>tournamentplayers
    }

    Class tournamentPageObj <<tournamentPageObj>>{
        <color:darkGreen>Array<Tournament | Date> <color:royalBlue>tournamentPageObj
    }
    
    
}

package logical-classes <<frame>>{

    Class GeneralSettings{
        <color:darkGreen>String <color:royalBlue>type
        <color:darkGreen>String <color:royalBlue>gamemode
        <color:darkGreen>String <color:royalBlue>name
    }

    Class Tournament{
        <color:darkGreen>String <color:royalBlue>name
        <color:darkGreen>int <color:royalBlue>TournamentID
        <color:darkGreen>GeneralSettings <color:royalBlue>generalSettings
        <color:darkGreen>Team <color:royalBlue>winner
        <color:darkGreen>Team[] <color:royalBlue>teams
        <color:darkGreen>Rounds[] <color:royalBlue>rounds
        <color:darkGreen>Boolean <color:royalBlue>hasBronze

        <color:darkGreen>void</color> startTournamemt()
        <color:darkGreen>void</color> createBrackets()
        <color:darkGreen>int setBracketRounds(Team[] <color:royalBlue>teams</color>)
        <color:darkGreen>void</color> playWalkover()
        <color:darkGreen>void</color> createRoundRobin()
        <color:darkGreen>int</color> setRoundRobinRounds(Team[] <color:royalBlue>teams</color>)
        <color:darkGreen>void</color> findRoundRobinWiner()
    }

    Class Round{
        <color:darkGreen>Tournament <color:royalBlue>tournament
        <color:darkGreen>int <color:royalBlue>firstMatchNumber
        <color:darkGreen>int <color:royalBlue>roundNumber
        <color:darkGreen>int <color:royalBlue>numberOfRounds
        <color:darkGreen>Match[] <color:royalBlue>matches
        <color:darkGreen>Array<Team|ShadowTeam> <color:royalBlue>teams

        <color:darkGreen>Array<Team|ShadowTeam></color> fillOutTeams(<color:darkGreen>Team[] <color:royalBlue>teams</color>)
        <color:darkGreen>void</color> setseeds()
        <color:darkGreen>Array<Team|ShadowTeam></color> sortTeams(<color:darkGreen>Array<Team|ShadowTeam> <color:royalBlue>teams</color>)
        <color:darkGreen>Array<Team|ShadowTeam></color> shuffleTeams()
        <color:darkGreen>void</color> addMatches()


    }

    Class Match{
        <color:darkGreen>Round <color:royalBlue>round 
        <color:darkGreen>int <color:royalBlue>ind 
        <color:darkGreen>Team[] <color:royalBlue>teams
        <color:darkGreen>int[] <color:royalBlue>results
        <color:darkGreen>int <color:royalBlue>matchnumber
        <color:darkGreen>Int <color:royalBlue>matchSeed
        <color:darkGreen>Team <color:royalBlue>winner
        <color:darkGreen>Team <color:royalBlue>looser

        <color:darkGreen>void</color> updateScore(<color:darkGreen>int <color:royalBlue>score0</color>, int <color:royalBlue>score1</color>)
    }

    Class Team{
        <color:darkGreen>TeamMember[] <color:royalBlue>members
        <color:darkGreen>String <color:royalBlue>name
        <color:darkGreen>int <color:royalBlue>id
        <color:darkGreen>int[] <color:royalBlue>score 
        <color:darkGreen>int[] <color:royalBlue>pointDifference
        <color:darkGreen>float <color:royalBlue>avrageTrophies

        <color:darkGreen>void</color> addMember(<color:darkGreen>TeamMember <color:royalBlue>member)
    }

    Class ShadowTeam {
        <color:darkGreen>float <color:royalBlue>tournamentID
        <color:darkGreen>float <color:royalBlue>seed
    }

    class TeamMember{
        <color:darkGreen>String <color:royalBlue>name
        <color:darkGreen>int <color:royalBlue>trophies
        <color:darkGreen>int <color:royalBlue>teamID
        <color:darkGreen>int <color:royalBlue>tournamentID
    }

}

package Database <<frame>>{
    class PushDatabase{
        <color:darkGreen>void</color> deleteTournament(int <color:royalBlue>tournamentID</color>, <color:darkGreen>()=>void <color:royalBlue>success</color>)
        <color:darkGreen>void</color> addTournament(Tournament <color:royalBlue>tournamentObject</color>, <color:darkGreen>()=>void <color:royalBlue>success</color>)
        <color:darkGreen>void </color>deleteGameMatch(int <color:royalBlue>tournamentID</color>, <color:darkGreen>()=>void <color:royalBlue>success</color>)
        <color:darkGreen>void</color> addGameMatch(Match <color:royalBlue>match</color>, <color:darkGreen>()=>void <color:royalBlue>success</color>)
        <color:darkGreen>void</color> deleteTeams(int <color:royalBlue>tournamentID</color>, <color:darkGreen>()=>void <color:royalBlue>success</color>)
        <color:darkGreen>void</color> addTeam(Team <color:royalBlue>team</color>, <color:darkGreen>()=>void <color:royalBlue>success</color>)
        <color:darkGreen>void</color> deleteTeamMember(int <color:royalBlue>tournamentID</color>, <color:darkGreen>()=>void <color:royalBlue>success</color>)
        <color:darkGreen>void</color> addTeamMember(TeamMember <color:royalBlue>teamMemberInfo</color>, <color:darkGreen>()=>void <color:royalBlue>success</color>)
    }
}

Tournament  -right-> "1" GeneralSettings : <color:A80035>Uses
Tournament "1" -- "*" Round : <color:A80035>Rounds is in tournament
Tournament --> "*" Team : <color:A80035>contains these teams 
Round"1" --"*" Match : <color:A80035>Matches are played in
Match-->"0..2"Team : <color:A80035>Teams is playing in 
Match-->"0..2"ShadowTeam : <color:A80035>ShadowTeams is playing in 
Team-->"1..2"TeamMember : <color:A80035>Teams has members
Round-->"*"Team : <color:A80035>Has teams playing in
Round -->"*"ShadowTeam : <color:A80035>Has shadowteams playing in

EditTournamentPage--> "1" Match : <color:A80035>Edits match
EditTournamentPage--> "1" Tournament : <color:A80035>Edits tournament

ShowTournamentPage--> "*" Round : <color:A80035>Contains Rounds
ShowTournamentPage--> "1" Tournament : <color:A80035>Contains Torunament

NewTournament-up[#c78100]-> "1" GeneralSettings : <color:c78100>Uses to create tournament
AddSinglerPlayer-[#c78100]-> "1" GeneralSettings : <color:c78100>Uses to create tournament
AddTwoPlayerTeams-[#c78100]down-> "1" GeneralSettings : <color:c78100>Uses to create tournament

AddSinglerPlayer -[#purple]down->"1" tournamentplayer : <color:purple>Fills out tournamentplayer
AddTwoPlayerTeams -[#blue]->"1" tournamentplayers : <color:blue>Fills out tournamentplayers
TournamentPage -[#green]->"1" tournamentPageObj : <color:green>Fills out tournamentPageObj

tournamentplayer -[#purple]left->"1" Tournament : <color:purple>Stores a tournament
tournamentplayers -[#blue]left->"1" Tournament : <color:blue>Stores a tournament
tournamentPageObj -[#green]left->"1" Tournament : <color:green>Stores a tournament

TournamentPage -down->"1" Tournament : <color:A80035>Creates a tournament

Overview -[#Black]-> "1" PushDatabase : Delegates database tasks to
ShowTournamentPage -[#Black]-> "1" PushDatabase : Delegates database tasks to


Team-r-|>ShadowTeam




hide <<tournamentplayer>> circle
hide <<tournamentplayer>> methods
hide <<tournamentplayer>> stereotype

hide <<tournamentplayers>> circle
hide <<tournamentplayers>> methods
hide <<tournamentplayers>> stereotype

hide <<tournamentPageObj>> circle
hide <<tournamentPageObj>> methods
hide <<tournamentPageObj>> stereotype

AddTwoPlayerTeams -down[hidden]-> EditTournamentPage
"React-pages"-down[hidden]>"logical-classes"
"React-pages"-down[hidden]>"variables"

variables-up[hidden]->"logical-classes"
variables-up[hidden]->"logical-classes"
variables-up[hidden]->"logical-classes"
variables-up[hidden]->"logical-classes"

AddSinglerPlayer-down[hidden]->ShowTournamentPage

EditTournamentPage-right[hidden]->NewTournament

AddSinglerPlayer-down[hidden]->TournamentPage

AddSinglerPlayer-left[hidden]->ShowTournamentPage
AddSinglerPlayer-down[hidden]->EditTournamentPage
AddSinglerPlayer-down[hidden]->NewTournament






@enduml